#summary Performance benchmark compared to the original C implementation.

We will run both implementations with a list of 500 hosts. Instead of executing "ssh", they will execute "/bin/echo" so that we measure only the fork() + processing overhead of the MPSSH implementations.

= host list =

We generate the host list using the following command:
{{{
for i in {1..500} ; do echo "host$i" ; done > testlist
}}}

= mpssh in C =

First we patch "mpssh" to execl() "/bin/echo". Here are the results:
{{{
$ time ./mpssh -f ./testlist 'command' | wc -l
509

real    0m0.211s
user    0m0.064s
sys     0m0.232s
}}}

= mpssh in Python =

Here are the results:
{{{
$ time ./mpssh.py -S /bin/echo --delay 0 -f ./testlist 'command' | wc -l
509

real    0m2.784s
user    0m0.264s
sys     0m1.292s
}}}

= Conclusion =

The Python implementation consumes about 5 times more CPU and finishes about 13 times slower. However, in absolute numbers we are speaking about 0.21 seconds vs. 2.78 seconds. The difference of about 2.57 seconds is negligible compared to the network latency that we would have connecting to 500 hosts simultaneously.